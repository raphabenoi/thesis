
swagger: "2.0"
info:
  version: 1.0.0
  title: hypenergy
  description: hypenergy REST API Application
basePath: /api/v1/hypenergy

tags:

  - name: Asks
    description: Simple ask endpoints

  - name: Auctions
    description: Simple auction endpoints

  - name: Bids
    description: Simple bid endpoints

  - name: Grids
    description: Simple grid endpoints

  - name: Markets
    description: Simple market endpoints

  - name: SmartMeterReadings
    description: Simple smartMeterReading endpoints

  - name: MarketParticipants
    description: Simple marketParticipant endpoints

  - name: SmartMeters
    description: Simple smartMeter endpoints


consumes:
  - application/json
produces:
  - application/json

definitions:
  

    AskBody:
      type: object
      title: Ask
      required:
         - id
         - auctionId
         - sender
         - amount
         - price
         - successful
         - unmatchedAmount
      properties:
        id:
          type: string
          example: a_text
        auctionId:
          type: string
          example: a_text
        sender:
          type: string
          example: a_text
        amount:
          type: number
          example: 123
        price:
          type: number
          example: 123
        successful:
          type: boolean
          example: true
        unmatchedAmount:
          type: number
          example: 123

    AuctionBody:
      type: object
      title: Auction
      required:
         - id
         - status
         - start
         - end
         - mcp
         - matchedAmount
         - unmatchedSupply
         - unmatchedDemand
      properties:
        id:
          type: string
          example: a_text
        status:
          type: integer
          enum:
              - 0
              - 1
              - 2
              - 3
          example: 0
        start:
          type: number
          example: 123
        end:
          type: number
          example: 123
        mcp:
          type: number
          example: 123
        matchedAmount:
          type: number
          example: 123
        unmatchedSupply:
          type: number
          example: 123
        unmatchedDemand:
          type: number
          example: 123

    BidBody:
      type: object
      title: Bid
      required:
         - id
         - auctionId
         - sender
         - amount
         - price
         - successful
         - unmatchedAmount
      properties:
        id:
          type: string
          example: a_text
        auctionId:
          type: string
          example: a_text
        sender:
          type: string
          example: a_text
        amount:
          type: number
          example: 123
        price:
          type: number
          example: 123
        successful:
          type: boolean
          example: true
        unmatchedAmount:
          type: number
          example: 123

    GridBody:
      type: object
      title: Grid
      required:
         - id
         - coinBalance
         - energyBalance
         - gridBuyPrice
         - gridSellPrice
      properties:
        id:
          type: string
          example: a_text
        coinBalance:
          type: number
          example: 123
        energyBalance:
          type: number
          example: 123
        gridBuyPrice:
          type: number
          example: 123
        gridSellPrice:
          type: number
          example: 123

    MarketBody:
      type: object
      title: Market
      required:
         - id
         - auctionTime
         - coinBalance
         - energyBalance
         - gridBuyPrice
         - gridSellPrice
      properties:
        id:
          type: string
          example: a_text
        auctionTime:
          type: number
          example: 123
        coinBalance:
          type: number
          example: 123
        energyBalance:
          type: number
          example: 123
        gridBuyPrice:
          type: number
          example: 123
        gridSellPrice:
          type: number
          example: 123

    SmartMeterReadingBody:
      type: object
      title: SmartMeterReading
      required:
         - id
         - auctionPeriod
         - consumed
         - produced
      properties:
        id:
          type: string
          example: a_text
        auctionPeriod:
          type: string
          example: a_text
        consumed:
          type: number
          example: 123
        produced:
          type: number
          example: 123

    MarketParticipantBody:
      type: object
      title: MarketParticipant
      required:
         - id
         - name
         - is
         - coinBalance
         - frozenCoins
         - energyBalance
         - readings
      properties:
        id:
          type: string
          example: a_text
        name:
          type: string
          example: a_text
        is:
          type: integer
          enum:
              - 0
              - 1
              - 2
          example: 0
        coinBalance:
          type: number
          example: 123
        frozenCoins:
          type: number
          example: 123
        energyBalance:
          type: number
          example: 123
        readings:
          type: Array&lt;FlatConvectorModel&lt;SmartMeterReading&gt;&gt;
          example: {}

    SmartMeterBody:
      type: object
      title: SmartMeter
      required:
         - id
         - auctionPeriod
         - consumed
         - produced
      properties:
        id:
          type: string
          example: a_text
        auctionPeriod:
          type: string
          example: a_text
        consumed:
          type: number
          example: 123
        produced:
          type: number
          example: 123
   

    getBidsByAuctionIdBody:
       type: object
       title: getBidsByAuctionIdParams
       required:
          - auctionId
       properties:
         auctionId:
           type: string
           example: a_text

    getAsksByAuctionIdBody:
       type: object
       title: getAsksByAuctionIdParams
       required:
          - auctionId
       properties:
         auctionId:
           type: string
           example: a_text

    sendReadingBody:
       type: object
       title: sendReadingParams
       required:
          - reading
          - participantId
       properties:
         reading:
           type: SmartMeterReading&gt;
           example: {}
         participantId:
           type: string
           example: a_text

    clearAuctionBody:
       type: object
       title: clearAuctionParams
       required:
          - auctionId
       properties:
         auctionId:
           type: string
           example: a_text

    settleAuctionBody:
       type: object
       title: settleAuctionParams
       required:
          - auctionId
       properties:
         auctionId:
           type: string
           example: a_text

    buyFromGridBody:
       type: object
       title: buyFromGridParams
       required:
          - buyerId
          - amount
       properties:
         buyerId:
           type: string
           example: a_text
         amount:
           type: number
           example: 123

    transferCoinsBody:
       type: object
       title: transferCoinsParams
       required:
          - from
          - to
          - amount
       properties:
         from:
           type: string
           example: a_text
         to:
           type: string
           example: a_text
         amount:
           type: number
           example: 123

paths:


  /asks: 
    get:
      tags:
        - Asks
      description: Fetch all asks
      responses:
        200:
          description: Returns all asks 
    post:
      tags:
        - Asks
      description: Create a new ask
      parameters:
        - name: ask
          in: body
          description: a ask
          required: true
          schema:
            $ref: "#/definitions/AskBody"
      responses:
        200:
          description: Successful insertion of asks 


  /asks/{id}:
    get:
      tags:
        - Asks
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the ask to retrieve
          type: string
      responses:
        200:
          description: Return the ask with the specified id
        404:
          description: Ask not found 

  /auctions: 
    get:
      tags:
        - Auctions
      description: Fetch all auctions
      responses:
        200:
          description: Returns all auctions 
    post:
      tags:
        - Auctions
      description: Create a new auction
      parameters:
        - name: auction
          in: body
          description: a auction
          required: true
          schema:
            $ref: "#/definitions/AuctionBody"
      responses:
        200:
          description: Successful insertion of auctions 


  /auctions/{id}:
    get:
      tags:
        - Auctions
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the auction to retrieve
          type: string
      responses:
        200:
          description: Return the auction with the specified id
        404:
          description: Auction not found 

  /bids: 
    get:
      tags:
        - Bids
      description: Fetch all bids
      responses:
        200:
          description: Returns all bids 
    post:
      tags:
        - Bids
      description: Create a new bid
      parameters:
        - name: bid
          in: body
          description: a bid
          required: true
          schema:
            $ref: "#/definitions/BidBody"
      responses:
        200:
          description: Successful insertion of bids 


  /bids/{id}:
    get:
      tags:
        - Bids
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the bid to retrieve
          type: string
      responses:
        200:
          description: Return the bid with the specified id
        404:
          description: Bid not found 

  /grids: 
    get:
      tags:
        - Grids
      description: Fetch all grids
      responses:
        200:
          description: Returns all grids 
    post:
      tags:
        - Grids
      description: Create a new grid
      parameters:
        - name: grid
          in: body
          description: a grid
          required: true
          schema:
            $ref: "#/definitions/GridBody"
      responses:
        200:
          description: Successful insertion of grids 


  /markets: 
    get:
      tags:
        - Markets
      description: Fetch all markets
      responses:
        200:
          description: Returns all markets 
    post:
      tags:
        - Markets
      description: Create a new market
      parameters:
        - name: market
          in: body
          description: a market
          required: true
          schema:
            $ref: "#/definitions/MarketBody"
      responses:
        200:
          description: Successful insertion of markets 



  /marketParticipants: 
    get:
      tags:
        - MarketParticipants
      description: Fetch all marketparticipants
      responses:
        200:
          description: Returns all marketparticipants 
    post:
      tags:
        - MarketParticipants
      description: Create a new marketparticipant
      parameters:
        - name: marketparticipant
          in: body
          description: a marketparticipant
          required: true
          schema:
            $ref: "#/definitions/MarketParticipantBody"
      responses:
        200:
          description: Successful insertion of marketparticipants 


  /marketparticipants/{id}:
    get:
      tags:
        - MarketParticipants
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the marketparticipant to retrieve
          type: string
      responses:
        200:
          description: Return the marketparticipant with the specified id
        404:
          description: MarketParticipant not found 



  /getBidsByAuctionId:
    post:
      tags:
        - getBidsByAuctionId
      description: getBidsByAuctionId
      parameters:
        - name: getBidsByAuctionIdParams
          in: body
          required: true
          schema:
            $ref: "#/definitions/getBidsByAuctionIdBody"
      responses:
        200:
          description: getBidsByAuctionId executed correctly
        500:
          description: getBidsByAuctionId raised an exception


  /getAsksByAuctionId:
    post:
      tags:
        - getAsksByAuctionId
      description: getAsksByAuctionId
      parameters:
        - name: getAsksByAuctionIdParams
          in: body
          required: true
          schema:
            $ref: "#/definitions/getAsksByAuctionIdBody"
      responses:
        200:
          description: getAsksByAuctionId executed correctly
        500:
          description: getAsksByAuctionId raised an exception


  /sendReading:
    post:
      tags:
        - sendReading
      description: sendReading
      parameters:
        - name: sendReadingParams
          in: body
          required: true
          schema:
            $ref: "#/definitions/sendReadingBody"
      responses:
        200:
          description: sendReading executed correctly
        500:
          description: sendReading raised an exception


  /clearAuction:
    post:
      tags:
        - clearAuction
      description: clearAuction
      parameters:
        - name: clearAuctionParams
          in: body
          required: true
          schema:
            $ref: "#/definitions/clearAuctionBody"
      responses:
        200:
          description: clearAuction executed correctly
        500:
          description: clearAuction raised an exception


  /settleAuction:
    post:
      tags:
        - settleAuction
      description: settleAuction
      parameters:
        - name: settleAuctionParams
          in: body
          required: true
          schema:
            $ref: "#/definitions/settleAuctionBody"
      responses:
        200:
          description: settleAuction executed correctly
        500:
          description: settleAuction raised an exception


  /buyFromGrid:
    post:
      tags:
        - buyFromGrid
      description: buyFromGrid
      parameters:
        - name: buyFromGridParams
          in: body
          required: true
          schema:
            $ref: "#/definitions/buyFromGridBody"
      responses:
        200:
          description: buyFromGrid executed correctly
        500:
          description: buyFromGrid raised an exception


  /transferCoins:
    post:
      tags:
        - transferCoins
      description: transferCoins
      parameters:
        - name: transferCoinsParams
          in: body
          required: true
          schema:
            $ref: "#/definitions/transferCoinsBody"
      responses:
        200:
          description: transferCoins executed correctly
        500:
          description: transferCoins raised an exception

